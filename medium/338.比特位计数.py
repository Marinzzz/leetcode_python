# 比特位计算
# 0
# 1 1
# 2 10
# 3 11
# 4 100

class Solution:
    def countBits(self, num: int):
        dp = [0] * (len(num) + 1)
        for i in range(1, len(num) + 1):
            dp[i] = dp[i >> 1] + i & 1 #一个数的和它除以2(向下取整)其实只有1位的差距，就是最后一位是否是1
        return dp





if __name__ == "__main__":
    a = Solution()
    ret = a.countBits(16)
    print(ret)

"""
0 0
1 1
2 1
3 2

4 1
5 2
6 2
7 3

8 1
9 2
10 2
11 3

12 2 1100 
13 3
14 3
15 4

16 1
17 2
18 2
19 3

20 2
21 3
22 3
23 4

24 2
25 3
26 3
27 4

28 3 
29 4
30 4
31 5

32 1
33 2
34 2
35 3

36 2 
37 3
38 3
39 4

40 2
41 3
42 3
43 4

44 3 
45 4
46 4
47 5

48 2
49 3
50 3
51 4

52 3
53 4
54 4
55 5

56 3
57 4
58 4
59 5

60 4 
61 5
62 5
63 6

64 1
65 2
66 2
67 3
68 2
69 3
70 3
71 4
72 2
73 3
74 3
75 4
76 3
77 4
78 4
79 5
80 2
81 3
82 3
83 4
84 3
85 4
86 4
87 5
88 3
89 4
90 4
91 5
92 4
93 5
94 5
95 6
96 2
97 3
98 3
99 4
100 3
"""
